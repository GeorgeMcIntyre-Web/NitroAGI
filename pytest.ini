[tool:pytest]
# Test discovery patterns
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Command line options
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=src/nitroagi
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=80
    --maxfail=1
    --disable-warnings
    --showlocals
    --color=yes
    -p no:warnings

# Markers for test categorization
markers =
    unit: Unit tests - fast, isolated tests
    integration: Integration tests - test module interactions
    e2e: End-to-end tests - full system tests
    slow: Slow running tests (deselect with '-m "not slow"')
    api: API endpoint tests
    database: Database integration tests
    redis: Redis integration tests
    kafka: Kafka/message queue tests
    ai: AI model tests (may require GPU)
    vision: Computer vision module tests
    language: Language processing module tests
    reasoning: Reasoning engine tests
    learning: Learning agent tests
    memory: Memory system tests
    orchestrator: Orchestrator tests
    security: Security-related tests
    performance: Performance benchmark tests
    smoke: Smoke tests for quick validation
    regression: Regression tests
    experimental: Experimental features (may fail)
    skip_ci: Skip in CI/CD pipeline

# Test output options
console_output_style = progress
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s - %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Coverage settings
[coverage:run]
source = src/nitroagi
omit = 
    */tests/*
    */test_*.py
    */__init__.py
    */migrations/*
    */config.py
    */settings.py
    */setup.py

[coverage:report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml

# Pytest plugins configuration
[pytest-timeout]
timeout = 300
timeout_method = thread

[pytest-mock]
mock_use_standalone_module = true

# Async configuration
[tool:pytest:asyncio]
asyncio_mode = auto

# Test environment variables
[pytest.env]
ENVIRONMENT = testing
DEBUG = true
LOG_LEVEL = DEBUG
DATABASE_URL = postgresql://test:test@localhost:5432/nitroagi_test
REDIS_URL = redis://localhost:6379/1
TEST_MODE = true
API_KEY = test_api_key_12345
SECRET_KEY = test_secret_key_67890